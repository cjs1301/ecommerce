// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
	provider = "postgresql"
	url = env("DB_URL")
}
generator client {
	provider = "prisma-client-js"
	output ="../src/prisma/client"
	binaryTargets = ["native", "linux-musl"]
}


enum Gender {
  	male
  	female
}
enum OrderStatus {
	beforePayment // 미결제
	overPaid // 결제 금액 초과
	underPaid // 결제 금액 미달
	paid // 결제 완료

	partiallyRefunded // 부분 환불 완료
	overRefunded // 환불 금액 초과
	underRefunded // 환불 금액 미달

	cancelled // 취소 완료
	done // 주문 완료
}
enum ExchangeStatus {
	application // 교환 신청
	approval // 교환 승인
	cancelled // 교환 취소
	return // 교환 신청 반려
}
enum RefundStatus {
	accepted // 반품 승인
	cancelled // 반품 취소
	requested // 반품 요청
	return // 반품 신청 반려
}

enum FulfillmentStatus {
	pending // 배송 대기
	shipped // 배송 출고
	arrived // 배송 도착
}

enum DiscountType {
	percentage
	fixed
}
enum Role {
	master
	manager
}

enum PointTransactionType {
    used // 사용 (감소)
    cancellation // (지급)
    attended // 출석 (지급)
    diagnosis // 진단시 (지급)
}

model Customer {
	id String @id @db.VarChar(40) @default(cuid())
	kakaoId String? @db.VarChar(150) @unique
	naverId String? @db.VarChar(150) @unique
	appleId String? @db.VarChar(150) @unique
	googleId String? @db.VarChar(150) @unique
	email String @db.VarChar(100)
	name String? @db.VarChar(50)
	gender Gender?
	birthyear DateTime? @db.Date
	mobile String? @db.VarChar(50) @unique// 무선 번호
	point Int @default(0)
	pointTransactions PointTransaction[]
	isActive Boolean @default(true)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deleted DateTime?
	address Address[]
	cart Cart?
	orders Order[]
	vbank Vbank?
}

model PointTransaction {
    customerId String @db.VarChar(150) @unique
    customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    point Int
    type PointTransactionType
    createdAt DateTime @default(now())
}
model Vbank {
	customerId String @db.VarChar(150) @unique
	customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	number Int
	date DateTime
	name String @db.VarChar(50)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Admin {
	id String @id @db.VarChar(40) @default(cuid())
	email String @db.VarChar(100) @unique
	password String @db.VarChar(150)
	name String @db.VarChar(100)
	role Role
	isActive Boolean @default(false)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model Address {
	id String @id @db.VarChar(40) @default(cuid())
	isPrimary Boolean
	customerId String @db.VarChar(150)
	customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	/// 주소지 별명
	nickName String? @db.VarChar(100)
	/// 수취인 이름
	payeeName String @db.VarChar(100)
	/// 우편 번호
	postcode String @db.VarChar(15)
	/// 국가
	country String @db.VarChar(150)
	/// 기본 주소의 도 (주)입니다.
	state String @db.VarChar(50)
	/// 기본 주소의 시입니다.
	city String @db.VarChar(50)
	/// 기본 주소의 상세 주소 1입니다.
	address1 String @db.VarChar(250)
	/// 기본 주소의 상세 주소 2입니다.
	address2 String @db.VarChar(250)
	/// 핸드폰 번호 입니다.
	mobile String @db.VarChar(50)
}

model Product {
	id String @id @db.VarChar(40) @default(cuid())
	/// 상품의 구매 가능 여부입니다.
	available Boolean @default(false)
	/// 상품의 썸네일입니다.
	thumbnail String? @db.VarChar(250)
	/// 상품의 이름입니다.
	name String @db.VarChar(150)
	/// 상품의 요약 설명입니다.
	summary String? @db.VarChar(250)
	/// 상품에 대한 설명입니다.
	description String?
	/// 키워드 ( 미사용 개념 미적립)
	keywords String?
	/// 가격
	price Int
	/// 상품의 할인 방식입니다. "percentage"or"fixed"or null
	discountType DiscountType?
	/// 할인 값
	discountValue Int?
	/// 상품 수량
	quantity Int
	/// 상품의 옵션 기본값으로 1개 생성 필수
	options Option[]
	/// 번들 상품
	bundles Bundle[]
	/// 카테고리
	categories Category[]
	brandId String? @db.VarChar(40)
	brand Brand? @relation(fields: [brandId], references: [id], onUpdate: Cascade)
	meta Json? @db.JsonB
	bundleItems BundleItem[] @relation("following")
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deleted Boolean @default(false)

	// 사용 하지 않는 관계 옵션
	bundleItemRelationship BundleItem[] @relation("follower")
	orderItems OrderOnProduct[]
	cartItems CartOnProduct[]
	cartBundleItems CartBundleItem[]
	orderBundleItems OrderBundleItem[]
	variations Variant[]
}

model Brand {
    id String @id @db.VarChar(40) @default(cuid())
    name String @db.VarChar(100) @unique
    products Product[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
	id String @id @db.VarChar(40) @default(cuid())
	productId String @db.VarChar(40)
	product Product @relation(fields: [productId], references: [id], onUpdate: Cascade)
	name String @db.VarChar(100) @unique
	description String?
}

model Option {
	id String @id @db.VarChar(40) @default(cuid())
	productId String @db.VarChar(40)
	product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	name String @db.VarChar(100)
	variations Variant[]

	cartItemOptions CartItemOption[]
	orderItemOptions OrderItemOption[]
}

model Bundle {
	id String @id @db.VarChar(40) @default(cuid())
	productId String @db.VarChar(40)
	product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	/// 추가 구매 옵션의 이름입니다.
	name String @db.VarChar(100)
	/// 추가 구매 옵션의 필수 구매 여부입니다.
	required Boolean @default(false)
	items BundleItem[]
}

/// 상품의 추가 구매 옵션 테이블
model BundleItem {
	id String @id @db.VarChar(40) @default(cuid())
	bundleId String @db.VarChar(40)
	bundle Bundle @relation(fields: [bundleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	parentProductId String @db.VarChar(40)
	parentProduct Product @relation("following", fields: [parentProductId], references: [id], onUpdate: Cascade)
	productId String @db.VarChar(40)
	product Product @relation("follower", fields: [productId], references: [id],  onUpdate: Cascade)
}

/// 상품의 옵션
model Variant {
	id String @unique @db.VarChar(40) @default(cuid())
	optionId String @db.VarChar(40)
	option Option @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	/// 옵션 선택지의 값입니다.
	value String @db.VarChar(150)
	productId String @db.VarChar(40)
	product Product @relation(fields: [productId], references: [id], onUpdate: Cascade)

	// 사용 하지 않는 관계 옵션
	cartItemOptions CartItemOption[]
	orderItemOptions OrderItemOption[]
}
model Cart {
	id String @id @db.VarChar(40) @default(cuid())
	customerId String @unique @db.VarChar(150)
	customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	items CartOnProduct[]
}
/// 카트 아이템 입니다
model CartOnProduct { //item
	id String @id @db.VarChar(40) @default(cuid())
	cartId String @db.VarChar(40)
	cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	productId String @db.VarChar(40)
	product Product @relation(fields: [productId], references: [id],  onUpdate: Cascade)
	quantity Int
	customId String @db.VarChar(150)
	bundleItems CartBundleItem[]
	options CartItemOption[]
	addedAt DateTime @default(now())
}

model CartItemOption{
	id String @id @db.VarChar(40) @default(cuid())
	cartItemId String @db.VarChar(40)
	cartItem CartOnProduct @relation(fields: [cartItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	productOptionId String? @db.VarChar(40)
	productOption Option? @relation(fields: [productOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
	variantId String? @db.VarChar(40)
	variant Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model CartBundleItem {
	id String @id @db.VarChar(40) @default(cuid())
	cartOnProcudtId String @db.VarChar(40)
	cartItem CartOnProduct @relation(fields: [cartOnProcudtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	productId String @db.VarChar(40)
	product Product @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
	quantity Int
}

model Order {
	id String @id @db.VarChar(40) @default(cuid())
	customerId String @db.VarChar(150)
	customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	items OrderOnProduct[]
	/// 상품의 최종금액 입니다
	price Int
	/// 할인 정보
	discount Discount?
	/// 결제 할 금액 정보
	payment Payment?
	/// 배송지 주소
	shippingAddress ShippingAddress?
	/// 주문 상태
	status OrderStatus
	/// 품목의 요청 사항입니다.
	request String? @db.VarChar(250)
	/// 거래 내역
	transactions Transaction[]
	/// 주문 취소 정보
	canceled OrderCanceled?
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	deleted Boolean @default(false)
}
/// 주문 상품들 목록
model OrderOnProduct {
	id String @id @db.VarChar(40) @default(cuid())
	orderId String @db.VarChar(40)
	order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	productId String? @db.VarChar(40)
	product Product? @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
	quantity Int
	request String? @db.VarChar(250)
	customId String @db.VarChar(150)
	options OrderItemOption[]
	bundleItems OrderBundleItem[]
	refunds Refund[]
	fulfillments Fulfillment[]
	exchanges Exchange[]
}

model OrderItemOption{
	id String @id @db.VarChar(40) @default(cuid())
	orderItemId String @db.VarChar(40)
	orderItem OrderOnProduct @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	productOptionId String? @db.VarChar(40)
	productOption Option? @relation(fields: [productOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
	variantId String? @db.VarChar(40)
	variant Variant? @relation(fields: [variantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model OrderBundleItem {
	id String @id @db.VarChar(40) @default(cuid())
	orderItemId String @db.VarChar(40)
	orderItem OrderOnProduct @relation(fields: [orderItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	productId String @db.VarChar(40)
	product Product @relation(fields: [productId], references: [id], onUpdate: Cascade)
	quantity Int
}
model ShippingAddress {
	id String @id @db.VarChar(40) @default(cuid())
	orderId String @db.VarChar(40) @unique
	order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	/// 이름
	name String @db.VarChar(100)
	/// 우편 번호
	postcode String @db.VarChar(15)
	/// 국가
	country String @db.VarChar(150)
	/// 기본 주소의 도 (주)입니다.
	state String @db.VarChar(50)
	/// 기본 주소의 시입니다.
	city String @db.VarChar(50)
	/// 기본 주소의 상세 주소 1입니다.
	address1 String @db.VarChar(250)
	/// 기본 주소의 상세 주소 2입니다.
	address2 String @db.VarChar(250)
	/// 핸드폰 번호 입니다.
	mobile String @db.VarChar(50)
}
model Transaction {
	id String @id @db.VarChar(40) @default(cuid())
	orderId String @db.VarChar(40)
	order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	paid Int
	cancelled Int
    refunded Int
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model Payment {
	orderId String @db.VarChar(40) @unique
	order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	/// 결제한 금액
	amount Int
	/// 공급자
	provider String? @db.VarChar(40)
	/// 결제일시
	paidAt DateTime?
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
model Fulfillment {
	id String @id @db.VarChar(40) @default(cuid())
	itemId String @db.VarChar(40)
    item OrderOnProduct @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	quantity Int
	status FulfillmentStatus @default(pending)
	trackingCompany String @db.VarChar(100) // 배송 이행 내역의 회사명입니다.
	trackingUid String? @db.VarChar(100) // 배송 이행 내역의 배송사 배송 내역 아이디(운송장번호등)입니다.
	trackingUrl String? @db.VarChar(250) // 배송 이행 내역의 조회 URL입니다.
	/// 상품 도착일시
	receivedAt DateTime?
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model OrderCanceled {
	orderId String @db.VarChar(40) @unique
	order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	reason String? @db.VarChar(250)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Refund {
	id String @id @db.VarChar(40) @default(cuid())
	itemId String @db.VarChar(40)
    item OrderOnProduct @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	status RefundStatus
	quantity Int
	reason String? @db.VarChar(250)
	cancelReason String? @db.VarChar(250)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Exchange {
	id String @id @db.VarChar(40) @default(cuid())
	itemId String @db.VarChar(40)
    item OrderOnProduct @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
	status ExchangeStatus
	quantity Int
	reason String? @db.VarChar(250)
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Discount{
    orderId String @db.VarChar(40) @unique
    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    point Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
